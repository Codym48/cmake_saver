# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  - main

strategy:
  matrix:
    lin-Python27:
      image.name: "ubuntu-latest"
      python.version: "2.7"
    lin-Python36:
      image.name: "ubuntu-latest"
      python.version: "3.6"
    lin-Python37:
      image.name: "ubuntu-latest"
      python.version: "3.7"
    lin-Python38:
      image.name: "ubuntu-latest"
      python.version: "3.8"
    lin-Python39:
      image.name: "ubuntu-latest"
      python.version: "3.9"
    lin-Python310:
      image.name: "ubuntu-latest"
      python.version: "3.10"
    mac-Python37:
      image.name: "macOS-latest"
      python.version: "3.7"
    mac-Python38:
      image.name: "macOS-latest"
      python.version: "3.8"
    mac-Python39:
      image.name: "macOS-latest"
      python.version: "3.9"
    mac-Python310:
      image.name: "macOS-latest"
      python.version: "3.10"
    win-Python37:
      image.name: "windows-latest"
      python.version: "3.7"
    win-Python38:
      image.name: "windows-latest"
      python.version: "3.8"
    win-Python39:
      image.name: "windows-latest"
      python.version: "3.9"
    win-Python310:
      image.name: "windows-latest"
      python.version: "3.10"

pool:
  vmImage: $(image.name)

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "$(python.version)"
    displayName: "Use Python $(python.version)"

  - script: |
      python -m pip install --upgrade pip
    displayName: "Install dependencies"

  - script: |
      pip install yapf
      yapf -d -r .
    displayName: "Format with yapf"

  - script: |
      pip install flake8
      flake8 . --count --show-source --statistics
    displayName: "Lint with flake8"

  - script: |
      pip install pytest-azurepipelines pytest-cov
      pytest --cov=. --cov-report=xml --test-run-title="$(Agent.JobName)"
    displayName: "pytest"

  - script: coverage report
    displayName: "Print coverage report"
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/coverage.xml"
    condition: succeededOrFailed()
